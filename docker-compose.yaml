volumes:
  postgres_data:
  redis_data:
  n8n_main:
  n8n_webhook:
  prometheus_data:
  grafana_data:
  rabbitmq_data:

networks:
  n8n-network:
    driver: bridge

x-n8n: &service-n8n
  image: n8nio/n8n:latest
  restart: unless-stopped
  networks:
    - n8n-network
  environment:
    - N8N_DIAGNOSTICS_ENABLED=${N8N_DIAGNOSTICS_ENABLED:-false}
    - N8N_COMPRESS_RESPONSE=false
    - N8N_USER_FOLDER=/home/node/.n8n
    - N8N_SECURE_COOKIE=${N8N_SECURE_COOKIE:-true}
    - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
    - N8N_HOST=${N8N_HOST}
    - N8N_PROTOCOL=${N8N_PROTOCOL:-https}
    - N8N_WEBHOOK=${N8N_WEBHOOK}
    - N8N_WEBHOOK_URL=${N8N_WEBHOOK_URL}
    - WEBHOOK_URL=${WEBHOOK_URL}
    - N8N_EDITOR_BASE_URL=${N8N_EDITOR_BASE_URL}
    - N8N_RUNNERS_ENABLED=true
    - N8N_BLOCK_ENV_ACCESS_IN_NODE=false
    - N8N_EMAIL_MODE=smtp
    - N8N_SMTP_HOST=${N8N_SMTP_HOST:-smtp.gmail.com}
    - N8N_SMTP_PORT=${N8N_SMTP_PORT:-587}
    - N8N_SMTP_USER=${SMTP_USER}
    - N8N_SMTP_PASS=${SMTP_PASS}
    - N8N_SMTP_SENDER=${SMTP_USER}
    - N8N_SMTP_SSL=false
    - N8N_METRICS=true
    - N8N_METRICS_INCLUDE_QUEUE_METRICS=true
    - EXECUTIONS_MODE=queue
    - QUEUE_BULL_REDIS_HOST=redis
    - QUEUE_HEALTH_CHECK_ACTIVE=true
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - OFFLOAD_MANUAL_EXECUTIONS_TO_WORKERS=true
    - N8N_RUNNERS_AUTH_TOKEN=${N8N_RUNNERS_AUTH_TOKEN}
    - N8N_TASK_BROKER_URL=http://n8n:5679
    - N8N_COMMAND_RESPONSE_URL=http://n8n:5679
    - N8N_TASK_BROKER_PORT=5679
    - N8N_NODE_FUNCTION_ALLOW_EXTERNAL=*
    - N8N_NODE_DEFAULT_ALLOW_EXTERNAL_HOSTS=*

services:

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    volumes:
      - redis_data:/data
    networks:
      - n8n-network

  postgres:
    image: postgres:17
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - n8n-network

  n8n:
    <<: *service-n8n
    container_name: n8n
    volumes:
      - n8n_main:/home/node/.n8n
      - ./pdf_storage:/tmp/pdfs
      - ./scripts:/usr/local/bin/python-scripts:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - n8n-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:5678/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  n8n-webhook:
    <<: *service-n8n
    container_name: n8n-webhook
    command: webhook
    volumes:
      - n8n_webhook:/home/node/.n8n
    depends_on:
      n8n:
        condition: service_healthy
    networks:
      - n8n-network

  n8n-worker:
    <<: *service-n8n
    container_name: n8n-worker
    command: worker
    volumes:
      - n8n_main:/home/node/.n8n
      - ./pdf_storage/tmp:/tmp
      - ./pdf_storage:/tmp/pdfs
    depends_on:
      n8n:
        condition: service_healthy
    networks:
      - n8n-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    networks:
      - n8n-network
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    networks:
      - n8n-network
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:-admin}

  rabbitmq:
    image: rabbitmq:4.2.0-beta.4-management-alpine
    container_name: rabbitmq
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    restart: unless-stopped
    networks:
      - n8n-network
